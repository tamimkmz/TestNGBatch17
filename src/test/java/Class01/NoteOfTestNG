

TestNG
Class1

TestNG is a Fm that allows us to build test cases.

All the test cases are written down under the annotation :
@Test

Testing login functionality
1 go to the website
2 enter username and password
3 click login button
4 verify that you’re logged in

Testing login functionality
1 go to the website
2 enter incorrect username and password
3 click login button
4 verify that you’re not logged in

@BeforeMethod —> runs before every @Test
@AfterMethod —> runs after every @Test

DEPENDS ON: depend on it only execute if my login pass

Depends on the method that is dependent on a parent method will only execute
if the parent method passes.

ENABLE/DISABLE
Enable = false —> once a testcase is set to enabled =false it will be ignored

PRIORITY
TestNGs are executed in alphabetical order,(A,B,C but, you can prioritize
 them by adding (priority1,2,3)
 after @Test,
The highest priority is 0, it’s by default!!! If You don’t mention a priority.

ASSERTIONS: assertion in testMG allow you to verify that you are getting
expected result.
Assert.assertTrue();
sout("hello")
Assert.assertEquals(String,String)

Hard assertions - if an assertion failed, testNG will quit the test
 case an mark it as failed, it will not
proceed with the rest of the test cases.

Assert.assertTrue() - takes a boolean value
Assert.assertEquals(actual, expected) - takes 2 Strings

SoftAssertions - if an assertion failed, testNG will not quit the test
 case and proceed with the rest of the
 test cases, until it checks all the assertions and it gives you the failed
  case too.

Declare the obj of soft assertion
SoftAssert soft=new SoftAssert();
Write down an assertions:
 soft.AssertTrue()
 soft.AssertEquals()
Once assertions are written in the end - soft.AssertAll() the purpose
is to compile all the assertions.

@DataProvider:
 1.Declare the data..in..2D array
 @DataProvider(name=" ")
 2D array with data

 2. @Teat(dataProvider=:nameof the dataProvider")
 public void testcase(String,String, String)
@Test(dataProvider="credentials")
public void LoginWithInvalidCredentials(String, userName, String Password,
String ExpectedError)



Annotations:

1.@Test:
All the test cases must be written down under the annotation of @Test.


whenever u run a class , it is going to execute each and every method
 under the annotation of
@Test.

by default @Test annotation follows alphabetical order of execution of
the test cases

e.g public void atestCase(); --> will execute first
    public void btestCase();-->will execute second

    the green tick indicates that test case has passed
    the red sign indicates that the test case has failed



@BeforeMethod annotation:

the code under this annotation is going to execute everytime before
each and every @Test execution is made



@AfterMethod annotation :

the code under this annotation is going to execute after every test
Method (after every @TEST)


Assertions:
we are not using if else condition because even if the test case fails
 (i.e the conditon doesnt pass in if)
the testNG will still show it has passed
in order to overcome that we use
Assertions from testNG
the library is Assert
and we call differnet types of assertions from it

first assertion that we learned is
1.Assert.AssertEquals(String , String)
it compares two strings if they are equal test case passed else fails.

2.Assert.AssetTrue(boolean)-->if the boolean is True the Assertion will pass
if the boolean is false the assertion will fail


1.HardAssertions
As soon as any assertion FAIlS it doesnt check for other assertions ,
 marks the test as failed and quits


Assert.Assertequals(Expected value,Actual Value)-->if they are equal
your test case will pass
--> if they are not equal your test case is going to FAIL

2.SoftAssertions:

Soft asseertion will execute all assertions that are there despite of
the fact that they FAIL or PASS
and once it has evaluated them all then it will mark the test case as
Failed or Passed
(it marks it failed even if one assertion has failed)

The advantage of using soft asssert is that we can
see what errors we are having in other assertions that we make in the
same test case
but we cant see them if we use hardassertion as IT WILL EXIT AS SOON AS
 THE FIRST ASSERTION FAILS

method to implement:
1. delcare the instance
softAssert soft =new softAssert();
2.make assertions

soft.assertEquals();

3. at the end of makiing all assertions
you must do
soft.assertALL()

this evalutes wether the test case has to be marked passed or failed

---------Data Provider-----------
Used for dataDriven testing
 DataProviders in TestNG are another way to pass the parameters in the
 test function. DataProviders pass different values to the TestNG Test Case
 in a single execution
@DataProvider
DataProvider: 1 declare the data under the annotation
@DataProvider comes in the form of @D array
--> we provide our data under this annotations and should name our
data provider @DataProvider(name="abc")

-->in which ever test case we want to use this data we simply link
 the data provider to that test case
  @Test(dataprovider="abc")

//dataprovider -->use it when u have small data
in case of larger data use excel file


if we want our test case to utilize this dataprovider
what do we need to do?
@test(dataprovider ="name of dataprovider")
public void test(){


}


whenever u want to create a testNg XML


Approach is
1.make sure the XML file is installed
      goto file--> preferences     (intellij idea--> preferences)
      plugins---> marketplace --> TestNgXML and install--> apply ok
2. Define the function under annotation @Test
3. Link he case with the data provider


testng xml file for a particular class

1. right click the or the class --> choose option  create testNg xml
2. then click OK
3.right click on the Project and select the option reload from disk.


In a testNg XML file

we have a structure

<suite>
		<test name="abc">
				<classes>
						<class name=  > </class>
						<class name=  > </class>

				</classes>
		</test>

</suite>




1.XML file
a. Class wise execution

 we can control which classes to execute
 <suite name="All Test Suite">
    <test verbose="2" preserve-order="true" name="mytest">
        <classes>
            <class name="class01.priority"></class>
            <class name="class02.dataProvider"></class>
            <class name="class01.AssertionBasic"></class>
        </classes>
    </test>
</suite>


click on a class and then create xml then reload from Disk then
reformat the code then delete everything between the tests
 and just keep the name="C: /User/tamim which is the path

 recap: that is annotation:
 All the test cases are written down under the annotation
 BeforeMethod —> runs before every @Test
 @AfterMethod —> runs after every @Test

 DEPENDS ON: depend on it only execute if my login pass
 Priority:

assertion:
@test
public
@test softAssertEquals

Listeners:
they listen to the events like
  test pass
   test fails
   testskip
   onteststart...
   1. class listener implements iTestListener
   @overRide
   public void onTestSuccess(iTestResult result){

   sout("The test case has passed"+result.getName());
   }
 @overRide
   public void onTestSuccess(iTestResult result){

   sout("The test case has passed"+result.getName());
   }